@inproceedings{Mondal-etal-2019-Investigating,
    title = "Investigating Context Adaptation Bugs in Code Clones",
    author = "Mondal, Manishankar  and
      Roy, B.  and
      Roy, C.  and
      A. Schneider, Kevin",
    booktitle = "Global Water Futures 2019",
    year = "2019",
    address = "Online",
    publisher = "University of Waterloo",
    url = "https://aclanthology.org/2019.GWF-1.137",
    doi = "10.1109/ICSME.2019.00026",
    abstract = "The identical or nearly similar code fragments in a code-base are called code clones. There is a common belief that code cloning (copy/pasting code fragments) can introduce bugs in a software system if the copied code fragments are not properly adapted to their contexts (i.e., surrounding code). However, none of the existing studies have investigated whether such bugs are really present in code clones. We denote these bugs as Context Adaptation Bugs, or simply Context-Bugs, in our paper and investigate the extent to which they can be present in code clones. We define and automatically analyze two clone evolutionary patterns that indicate fixing of Context-Bugs. According to our analysis on thousands of revisions of six open-source subject systems written in Java, C, and C{\#}, code cloning often introduces Context-Bugs in software systems. Around 50{\%} of the clone related bug-fixes can occur for fixing Context-Bugs. Cloning (copy/pasting) a newly created code fragment (i.e., a code fragment that was not added in a former revision) is more likely to introduce Context-Bugs compared to cloning a preexisting fragment (i.e., a code fragment that was added in a former revision). Moreover, cloning across different files appears to have a significantly higher tendency of introducing Context-Bugs compared to cloning within the same file. Finally, Type 3 clones (gapped clones) have the highest tendency of containing Context-Bugs among the three major clone-types. Our findings can be important for early detection as well as removal of Context-Bugs in code clones.",
}
